package BitManipulation;

import java.util.Arrays;

public class ReverseBitsT {

    public int reverseBits(int n) {
        //exchange two bytes
        n = (n & 0xffff0000) >>>  16 | (n & 0x0000ffff) << 16;
        //exchange  byte
        n = (n & 0xff000000) >>>  8 | (n & 0x00ff0000) << 8 | (n & 0x0000ff00) >>>  8 | (n & 0x000000ff) << 8;

        n = (n & 0xf0000000) >>>  4 | (n & 0x0f000000) << 4 | (n & 0x00f00000) >>>  4 | (n & 0x000f0000) << 4 |
                (n & 0x0000f000) >>>  4 | (n & 0x00000f00) << 4 | (n & 0x000000f0) >>>  4 | (n & 0x0000000f) << 4;
        // 16
        n = (n & 0xc0000000) >>>  2 | (n & 0x30000000) << 2 | (n & 0x0c000000) >>>  2 | (n & 0x03000000) << 2 |
                (n & 0x00c00000) >>>  2 | (n & 0x00300000) << 2 | (n & 0x000c0000) >>>  2 | (n & 0x00030000)
                << 2 | (n & 0x0000c000 )>>>  2 | (n & 0x000003000) << 2 | (n & 0x000000c00) >>> 2 |(n & 0x000000300) << 2 | (n & 0x000000c0) >>>  2 | (n &
                0x00000030) << 2 |( n & 0x0000000c) >>>  2 | (n & 0x00000003) << 2;
        // 32
        n = (n & 0x80000000 )>>>  1 | (n & 0x40000000) << 1 | (n & 0x20000000) >>>  1 | (n & 0x10000000) << 1 |
                (n & 0x08000000 )>>>  1 |( n & 0x04000000) << 1 | (n & 0x02000000) >>>  1 | (n & 0x01000000 )<< 1 |
                (n & 0x00800000 )>>>  1 | (n & 0x00400000) << 1 | (n & 0x00200000) >>>  1 | (n & 0x00100000) << 1 |
                        (n & 0x00080000) >>>  1 | (n & 0x00040000) << 1 | (n & 0x00020000) >>>  1 | (n & 0x00010000) << 1 |
                (n & 0x00008000) >>>  1 | (n & 0x00004000) << 1 | (n & 0x00002000) >>>  1 | (n & 0x00001000) << 1 |
                (n & 0x00000800) >>>  1 | (n & 0x00000400) << 1 | (n & 0x00000200) >>>  1 | (n & 0x00000100) << 1 |
                (n & 0x00000080) >>>  1 | (n & 0x00000040) << 1 | (n & 0x00000020) >>>  1 | (n & 0x00000010) << 1 |
                (n & 0x00000008) >>>  1 | (n & 0x00000004) << 1 | (n & 0x00000002) >>>  1 | (n & 0x00000001) << 1;

        return n;
    }
}
